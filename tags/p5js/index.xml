<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>P5js on Mostly Technical</title><link>https://balta2ar.github.io/tags/p5js/</link><description>Recent content in P5js on Mostly Technical</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 01 Jan 2023 20:37:14 +0100</lastBuildDate><atom:link href="https://balta2ar.github.io/tags/p5js/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiple p5js Canvases on One Page</title><link>https://balta2ar.github.io/posts/2023-01-01-multiple-p5js-canvases-on-one-page/</link><pubDate>Sun, 01 Jan 2023 20:37:14 +0100</pubDate><guid>https://balta2ar.github.io/posts/2023-01-01-multiple-p5js-canvases-on-one-page/</guid><description>&lt;p>It was fairly easy to set up integration of p5js into my blog posts if I
needed only one canvas per post. Having multiple canvases turned out to be
a bit more complicated. Since I spent several hours setting it up, I can
as well write a post about it.&lt;/p>
&lt;h3 id="two-modes-of-p5js">Two modes of p5js&lt;/h3>
&lt;p>It turns out there are two modes that p5 can work with: global and instance.
Read more here: &lt;a href="https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace">https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace&lt;/a>&lt;/p></description></item><item><title>Segment Trees for overlapping intervals</title><link>https://balta2ar.github.io/posts/2022-12-31-segment-trees-intervals/</link><pubDate>Sat, 31 Dec 2022 16:03:18 +0100</pubDate><guid>https://balta2ar.github.io/posts/2022-12-31-segment-trees-intervals/</guid><description>&lt;p>Segment trees are a data structure that can be used for a variety of problems.
Usually, I&amp;rsquo;ve seen them used for range queries, but they can also be used for
finding overlapping intervals.&lt;/p>
&lt;p>When applied to the problem of answering range queries (e.g. sum on an interval),
the key idea with segment trees is to split the problem space into smaller parts
during preprocessing, so that during query we can visit only a small part of the
problem space. Exactly the same idea is used for finding overlapping intervals.&lt;/p></description></item><item><title>Using p5.js in Hugo blog posts</title><link>https://balta2ar.github.io/posts/2022-12-30-p5js/</link><pubDate>Fri, 30 Dec 2022 12:03:18 +0100</pubDate><guid>https://balta2ar.github.io/posts/2022-12-30-p5js/</guid><description>&lt;p>This is a post where I&amp;rsquo;m experimenting with integrating p5.js into my blog posts.&lt;/p>
&lt;p>Sample javascript code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">drawCursor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">drawingContext&lt;/span>.&lt;span style="color:#a6e22e">setLineDash&lt;/span>([&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">background&lt;/span>(&lt;span style="color:#ae81ff">255&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#a6e22e">color&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>(&lt;span style="color:#a6e22e">mouseX&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">mouseX&lt;/span>, &lt;span style="color:#a6e22e">height&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sample python code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> dataclasses &lt;span style="color:#f92672">import&lt;/span> dataclass, field
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> typing &lt;span style="color:#f92672">import&lt;/span> Optional, List, Tuple, Callable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> math &lt;span style="color:#f92672">import&lt;/span> floor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Endpoint&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v: float
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ix: int
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sample visualization using p5.js:&lt;/p>
&lt;iframe srcdoc='
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.5.0/p5.min.js">&lt;/script>
&lt;script src="https://balta2ar.github.io/js/p5js-global.js">&lt;/script>

&lt;div class="p5js" id="p5js-container" style="width: 100%; height: 400px;">&lt;/div>
&lt;script src="v1-particles.js">&lt;/script>
' id="iframe-v1-particles" style="width: 100%; height: 400px; overflow: hidden;" scrolling="no" frameborder="0">
 &lt;p>Your browser does not support iframes.&lt;/p>
&lt;/iframe>
&lt;p>More content goes here.&lt;/p></description></item></channel></rss>
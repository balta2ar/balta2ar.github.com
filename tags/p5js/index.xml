<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>p5js on Mostly Technical</title><link>https://balta2ar.github.io/tags/p5js/</link><description>Recent content in p5js on Mostly Technical</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 31 Dec 2022 16:03:18 +0100</lastBuildDate><atom:link href="https://balta2ar.github.io/tags/p5js/index.xml" rel="self" type="application/rss+xml"/><item><title>Segment Trees for overlapping intervals</title><link>https://balta2ar.github.io/posts/2022-12-31-segment-trees-intervals/</link><pubDate>Sat, 31 Dec 2022 16:03:18 +0100</pubDate><guid>https://balta2ar.github.io/posts/2022-12-31-segment-trees-intervals/</guid><description>Segment trees are a data structure that can be used for a variety of problems. Usually, I&amp;rsquo;ve seen them used for range queries, but they can also be used for finding overlapping intervals.
When applied to the problem of answering range queries (e.g. sum on an interval), the key idea with segment trees is to split the problem space into smaller parts during preprocessing, so that during query we can visit only a small part of the problem space.</description></item><item><title>Using p5.js in Hugo blog posts</title><link>https://balta2ar.github.io/posts/2022-12-30-p5js/</link><pubDate>Fri, 30 Dec 2022 12:03:18 +0100</pubDate><guid>https://balta2ar.github.io/posts/2022-12-30-p5js/</guid><description>This is a post where I&amp;rsquo;m experimenting with integrating p5.js into my blog posts.
Sample javascript code:
function drawCursor() { drawingContext.setLineDash([2, 20]) background(255) stroke(color(0, 100, 0)) line(mouseX, 0, mouseX, height) } Sample python code:
from dataclasses import dataclass, field from typing import Optional, List, Tuple, Callable from math import floor @dataclass class Endpoint: v: float ix: int Sample visualization using p5.js:
More content goes here.</description></item></channel></rss>
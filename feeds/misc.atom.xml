<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mostly Technical - misc</title><link href="http://balta2ar.github.io/" rel="alternate"></link><link href="http://balta2ar.github.io/feeds/misc.atom.xml" rel="self"></link><id>http://balta2ar.github.io/</id><updated>2013-11-23T17:01:00+04:00</updated><entry><title>“Bandwidth shaping in Linux”</title><link href="http://balta2ar.github.io/bandwidth-shaping-in-linux.html" rel="alternate"></link><published>2013-11-23T17:01:00+04:00</published><updated>2013-11-23T17:01:00+04:00</updated><author><name>Yuri Bochkarev</name></author><id>tag:balta2ar.github.io,2013-11-23:/bandwidth-shaping-in-linux.html</id><summary type="html">&lt;p&gt;It&amp;#8217;s always been a problem for me to shape traffic in Linux. After Windows
experience with Outpost firewall I couldn&amp;#8217;t find an easy and convenient way
to shape traffic in Linux. Judging by the amount of similar questions over
the Internet it&amp;#8217;s unobvious not only to me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s always been a problem for me to shape traffic in Linux. After Windows
experience with Outpost firewall I couldn&amp;#8217;t find an easy and convenient way
to shape traffic in Linux. Judging by the amount of similar questions over
the Internet it&amp;#8217;s unobvious not only to me but to many other&amp;nbsp;users.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;It appears there are different ways to achieve that in Linux. I personally found
two of them useful: &lt;a href="http://monkey.org/~marius/pages/?page=trickle"&gt;trickle&lt;/a&gt; and &lt;a href="http://tldp.org/HOWTO/Traffic-Control-HOWTO/intro.html"&gt;tc&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;trickle&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;trickle&lt;/code&gt; is simple and easy to use, just run the program you want to limit
and specify the&amp;nbsp;bandwith:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ trickle -d 20kb wget http://mirror.rol.ru/archlinux/iso/2013.11.01/archlinux-2013.11.01-dual.iso
trickle: Could not reach trickled, working independently: No such file or directory
--2013-11-23 &lt;span class="m"&gt;17&lt;/span&gt;:09:37--  http://mirror.rol.ru/archlinux/iso/2013.11.01/archlinux-2013.11.01-dual.iso
Resolving mirror.rol.ru &lt;span class="o"&gt;(&lt;/span&gt;mirror.rol.ru&lt;span class="o"&gt;)&lt;/span&gt;... &lt;span class="m"&gt;194&lt;/span&gt;.67.1.114
Connecting to mirror.rol.ru &lt;span class="o"&gt;(&lt;/span&gt;mirror.rol.ru&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;194&lt;/span&gt;.67.1.114&lt;span class="p"&gt;|&lt;/span&gt;:80... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;541065216&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;516M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: ‘archlinux-2013.11.01-dual.iso’

 &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;[&lt;/span&gt;                                                                                      &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;144&lt;/span&gt;,540     &lt;span class="m"&gt;20&lt;/span&gt;.0KB/s  eta 5h 53m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;trickle&lt;/code&gt; works in userspace. It takes advantage of the unix loader preloading
functionality to intercept &lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt; calls. See the &lt;a href="http://monkey.org/~marius/trickle/trickle.pdf"&gt;paper&lt;/a&gt; for the&amp;nbsp;details.&lt;/p&gt;
&lt;h2&gt;tc&lt;/h2&gt;
&lt;p&gt;tc is a different beast. It&amp;#8217;s quite a complex thing for a newbie like me though
it&amp;#8217;s powerful. tc allows you to create intricate rules to shape your traffic.
The problem is that only outgoing traffic can be shaped in a graceful way. In
incoming traffic you can only brutally drop&amp;nbsp;packets.&lt;/p&gt;
&lt;p&gt;This is nasty but luckily there is a way around called &lt;a href="http://www.linuxfoundation.org/collaborate/workgroups/networking/ifb"&gt;The Intermediate
Functional Block device&lt;/a&gt;. With this module you can reroute incoming traffic
from ifb device to eth0 so that the traffic will be treated as outgoing when
leaving&amp;nbsp;ifb.&lt;/p&gt;
&lt;p&gt;I should&amp;#8217;ve propably taken a weekend to dig really deep into tc functionality
and master it but instead I went the easy way. After googling for a while I
found this brilliant question/answer and this&amp;nbsp;script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/350023/tc-ingress-policing-and-ifb-mirroring"&gt;Tc: ingress policing and ifb&amp;nbsp;mirroring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rfrail3/misc/blob/master/tc/traffic-control.sh"&gt;traffic-control.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspired by this two wonderful sources I came up with my own&amp;nbsp;version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# $1 -- incoming bandwidth&lt;/span&gt;
&lt;span class="c1"&gt;# $2 -- outgoing bandwidth&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# bandwidth.sh init -- modprobe &amp;amp;&amp;amp; ip up&lt;/span&gt;
&lt;span class="c1"&gt;# bandwidth.sh x y  -- set incoming bandwidth to x, outgoing to y&lt;/span&gt;
&lt;span class="c1"&gt;# bandwidth.sh      -- remove limits&lt;/span&gt;
&lt;span class="c1"&gt;# bandwidth.sh - y  -- remove incoming limits, set outgoing limit&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# init&lt;/span&gt;
&lt;span class="c1"&gt;# modprobe ifb numifbs=1&lt;/span&gt;
&lt;span class="c1"&gt;# ip link set dev ifb0 up # repeat for ifb1, ifb2, ...&lt;/span&gt;

&lt;span class="nv"&gt;PHY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eth0
&lt;span class="nv"&gt;VIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ifb0
&lt;span class="nv"&gt;IN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; go&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Initializing&amp;quot;&lt;/span&gt;
        go modprobe ifb &lt;span class="nv"&gt;numifbs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
        go ip link &lt;span class="nb"&gt;set&lt;/span&gt; dev ifb0 up
        &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$IN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;IN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OUT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

go tc qdisc del dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; root       &lt;span class="c1"&gt;# clear outgoing&lt;/span&gt;
go tc qdisc del dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; ingress    &lt;span class="c1"&gt;# clear incoming&lt;/span&gt;
go tc qdisc del dev &lt;span class="nv"&gt;$VIR&lt;/span&gt; root       &lt;span class="c1"&gt;# clean incoming&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

go tc qdisc add dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; handle ffff: ingress
go tc filter add dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; parent ffff: protocol ip u32 match u32 &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; action mirred egress redirect dev ifb0

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$IN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# incoming&lt;/span&gt;
    go tc qdisc add dev &lt;span class="nv"&gt;$VIR&lt;/span&gt; root handle &lt;span class="m"&gt;1&lt;/span&gt;: htb default &lt;span class="m"&gt;10&lt;/span&gt;
    go tc class add dev &lt;span class="nv"&gt;$VIR&lt;/span&gt; parent &lt;span class="m"&gt;1&lt;/span&gt;: classid &lt;span class="m"&gt;1&lt;/span&gt;:1 htb rate &lt;span class="nv"&gt;$IN&lt;/span&gt;
    go tc class add dev &lt;span class="nv"&gt;$VIR&lt;/span&gt; parent &lt;span class="m"&gt;1&lt;/span&gt;:1 classid &lt;span class="m"&gt;1&lt;/span&gt;:10 htb rate &lt;span class="nv"&gt;$IN&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OUT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# outgoing&lt;/span&gt;
    go tc qdisc add dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; root handle &lt;span class="m"&gt;1&lt;/span&gt;: htb default &lt;span class="m"&gt;10&lt;/span&gt;
    go tc class add dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; parent &lt;span class="m"&gt;1&lt;/span&gt;: classid &lt;span class="m"&gt;1&lt;/span&gt;:1 htb rate &lt;span class="nv"&gt;$OUT&lt;/span&gt;
    go tc class add dev &lt;span class="nv"&gt;$PHY&lt;/span&gt; parent &lt;span class="m"&gt;1&lt;/span&gt;:1 classid &lt;span class="m"&gt;1&lt;/span&gt;:10 htb rate &lt;span class="nv"&gt;$OUT&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also get the script &lt;a href="https://gist.github.com/balta2ar/7614370"&gt;here&lt;/a&gt;. Now traffic shaping is a matter of
a couple of&amp;nbsp;calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo bandwidth.sh init          &lt;span class="c1"&gt;# load ifb kernel module&lt;/span&gt;
sudo bandwidth.sh 100kbps       &lt;span class="c1"&gt;# set incoming limit&lt;/span&gt;
sudo bandwidth.sh - 200kbps     &lt;span class="c1"&gt;# remove incoming limit, set outgoing limit&lt;/span&gt;
sudo bandwidth.sh 10kbps 20kbps &lt;span class="c1"&gt;# set both incoming &amp;amp; outgoing limits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing that I miss now is shaping traffic for each process individually
and changing limits on the&amp;nbsp;fly.&lt;/p&gt;</content></entry><entry><title>“Octopress to rule them all”</title><link href="http://balta2ar.github.io/octopress-to-rule-them-all.html" rel="alternate"></link><published>2013-10-13T19:11:00+04:00</published><updated>2013-10-13T19:11:00+04:00</updated><author><name>Yuri Bochkarev</name></author><id>tag:balta2ar.github.io,2013-10-13:/octopress-to-rule-them-all.html</id><summary type="html">&lt;p&gt;It&amp;#8217;s been a long while since I decided to switch from &lt;a href="http://baltazar-bz.blogspot.ru/"&gt;Google Blogspot&lt;/a&gt;
to Octopress and start blogging like a geek. For almost a year I couldn&amp;#8217;t
force myself to write even a short post. There were different reasons to that,
and some of them are technical. Being …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a long while since I decided to switch from &lt;a href="http://baltazar-bz.blogspot.ru/"&gt;Google Blogspot&lt;/a&gt;
to Octopress and start blogging like a geek. For almost a year I couldn&amp;#8217;t
force myself to write even a short post. There were different reasons to that,
and some of them are technical. Being a complete rookie to Ruby, I was scared
by all these daunting rake commands and Octopress machinery. It actually helped
me to write down and summarize the commands that I need in a single place. Now
I&amp;#8217;d like them to be a separate post just as a little reminder to&amp;nbsp;myself.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;What I liked about Octopress immediately is markdown, of course. It wasn&amp;#8217;t
nearly convenient to fix an old post in Blogspot as it is in Octopress. You can
edit Blogspot posts right onsite to make it easier. Not for me. The feature of
switching modes between compose/&lt;span class="caps"&gt;HTML&lt;/span&gt; didn&amp;#8217;t help at all. Stop messing with
&lt;span class="caps"&gt;HTML&lt;/span&gt; in every post was a very attactive feature of Octopress. Besides, having
a blog in public so that people can send you pull requests is so cool that it
must be declared&amp;nbsp;illegal.&lt;/p&gt;
&lt;p&gt;Anyway, I made my decision and here it goes. I followed carefully &lt;a href="http://octopress.org/docs/"&gt;Octopress
documentation&lt;/a&gt;. It wasn&amp;#8217;t a piece of cake to install
correct version of Ruby, all necessary bundles, deal with &lt;a href="http://www.nonsenseby.me/blog/2013/04/13/arch-linux/"&gt;broken&lt;/a&gt;
&lt;a href="https://github.com/tmm1/pygments.rb/issues/45"&gt;pygments&lt;/a&gt;, configure my own
color scheme, and got it up and running eventually. Hopefully, I got through
all that and now it&amp;#8217;s time to relax in a serene joy and write one post after
another like a&amp;nbsp;mad.&lt;/p&gt;
&lt;p&gt;To do that, I use the following&amp;nbsp;commands.&lt;/p&gt;
&lt;h3&gt;1. Switch to source&amp;nbsp;branch&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout source
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Activate&amp;nbsp;rake&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source /home/bz/.rvm/scripts/rvm
rvm use 1.9.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Setup environment for&amp;nbsp;pygmentize&lt;/h3&gt;
&lt;p&gt;The problem with pygmentize out of the box is that mentos.py in my version
calls for &lt;code&gt;/usr/bin/env python&lt;/code&gt; which is &lt;code&gt;python3&lt;/code&gt; in ArchLinux by default.
However, &lt;code&gt;python2&lt;/code&gt; is required. To fix that, I created virtualenv where
&lt;code&gt;python2.7&lt;/code&gt; is active by default. Activate it before generating the&amp;nbsp;blog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/.virtualenvs/blog_env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. Run preview/generate&amp;nbsp;server&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jekyll --auto --server --future
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other useful commands might&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake preview
rake watch
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Create new&amp;nbsp;post&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake new_post\[&amp;quot;How I spent the summer&amp;quot;\]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6.&amp;nbsp;Deploy&lt;/h3&gt;
&lt;p&gt;When ready, I usually do &lt;code&gt;rake generate&lt;/code&gt; once again (just to be safe),
commit to the source branch, push and finally deploy. All this happens in the
source branch of the blog (&lt;code&gt;rake deploy&lt;/code&gt; automatically deals with &lt;code&gt;master&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake generate
git add .
git commit -m &amp;quot;New post about the last summer&amp;quot;
git push
rake deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I got new post upstream in a matter of&amp;nbsp;seconds.&lt;/p&gt;
&lt;hr&gt;</content></entry><entry><title>“Downloading iTunes U Course - The Hacker Way”</title><link href="http://balta2ar.github.io/downloading-itunes-u-course-the-hacker-way.html" rel="alternate"></link><published>2013-10-13T13:48:00+04:00</published><updated>2013-10-13T13:48:00+04:00</updated><author><name>Yuri Bochkarev</name></author><id>tag:balta2ar.github.io,2013-10-13:/downloading-itunes-u-course-the-hacker-way.html</id><summary type="html">&lt;p&gt;Today, kids, we are going to download iTunes U course almost exclusively from
the command&amp;nbsp;line.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;The easiest way to do that is to use iTunes to download all that for you.
Unfortunately, while I have iPod/iPad in my home ecosystem, I don&amp;#8217;t have any
Mac computers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, kids, we are going to download iTunes U course almost exclusively from
the command&amp;nbsp;line.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;The easiest way to do that is to use iTunes to download all that for you.
Unfortunately, while I have iPod/iPad in my home ecosystem, I don&amp;#8217;t have any
Mac computers. Thus, I&amp;#8217;m running iTunes in a virtual machine on Windows.
Imagine my user experience from such combination. Pure pain and&amp;nbsp;suffering.&lt;/p&gt;
&lt;p&gt;There wouldn&amp;#8217;t be this post if it was all smooth. For unknown reasons my iTunes
doesn&amp;#8217;t save downloaded video files. I can see it&amp;#8217;s downloading them, I can
see the temp file growing, but when it&amp;#8217;s done, puff, I can&amp;#8217;t find the file
anywhere. Luckily, there is a solution. It is a pity but you still need iTunes
for a couple of&amp;nbsp;steps.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, let&amp;#8217;s do it. Say, you found an interesting course on iTunes&amp;nbsp;U:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://balta2ar.github.io/images/ml.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 1. Subscribe to the course in&amp;nbsp;iTunes&lt;/h3&gt;
&lt;h3&gt;Step 2. Copy course&amp;nbsp;url&lt;/h3&gt;
&lt;p&gt;Click on any item in the course materials list and
select &amp;#8220;Copy iTunes U &lt;span class="caps"&gt;URL&lt;/span&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://balta2ar.github.io/images/copy-url.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;NB&lt;/span&gt;: There is &lt;a href="https://itunesu.itunes.apple.com/coursemanager/"&gt;iTunes U Course Manager&lt;/a&gt;
web page and I presume you might get the feed &lt;span class="caps"&gt;URL&lt;/span&gt; there (though I really doubt
you can). However, my country isn&amp;#8217;t enjoying Apple&amp;#8217;s&amp;nbsp;favour.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://balta2ar.github.io/images/bad-country.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 3. Download the&amp;nbsp;feed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -O list.xml https://p1-u.itunes.apple.com/WebObjects/LZStudent.woa/ra/feed/CODBABB3ZC
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 4. Extract links and&amp;nbsp;titles&lt;/h3&gt;
&lt;p&gt;The feed contains &lt;code&gt;feed/entry&lt;/code&gt; items in the format as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:itms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.itunes.com/dtds/itunesu-1.0.dtd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Machine Learning&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;subtitle&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;div&lt;span class="ni"&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;div&lt;span class="ni"&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;strong&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;A real Caltech course...&lt;span class="nt"&gt;&amp;lt;/subtitle&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2013-06-12T00:19:12PDT&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://p1-u.itunes.apple.com/WebObjects/LZStudent.woa/ra/courses/CODBABB3ZC&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;1/CODBABB3ZC&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;itms:courseid&amp;gt;&lt;/span&gt;CODBABB3ZC&lt;span class="nt"&gt;&amp;lt;/itms:courseid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;itms:auditUrl&amp;gt;&lt;/span&gt;https://itunesu.itunes.apple.com/audit/CODBABB3ZC&lt;span class="nt"&gt;&amp;lt;/itms:auditUrl&amp;gt;&lt;/span&gt;


    &lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Dr. Yaser Abu-Mostafa&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;![CDATA[AC___Lecture 01 slides]]&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;1/CODBABB3ZC/MAES7ECEVA&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2013-06-11T23:25:24PDT&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;published&amp;gt;&lt;/span&gt;2012-06-14T15:07:36PDT&lt;span class="nt"&gt;&amp;lt;/published&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;summary&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;![CDATA[AC___Lecture 01 slides]]&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;enclosure&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/pdf&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://a1372.phobos.apple.com/us/r30/CobaltPublic/v4/35/56/6a/35566a02-1e0a-3db8-17e2-69be6445ba9b/208-5815754981465838988-ACsld01.pdf&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;length=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300673&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;

...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is very convenient to use &lt;a href="http://xmlstar.sourceforge.net/doc/UG/xmlstarlet-ug.html"&gt;xmlstartlet&lt;/a&gt;
to extract titles and links from the feed. Note, however, that xmlstartlet is
very picky to namespace (thanks to &lt;a href="http://stackoverflow.com/questions/9025492/xmlstarlet-does-not-select-anything"&gt;this&lt;/a&gt;
answer). Extraction command will look as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xml sel -N x=&amp;quot;http://www.w3.org/2005/Atom&amp;quot; -t -m //x:entry -v x:title -o &amp;quot;|&amp;quot; -v x:link/@href -n list.xml &amp;gt; fmt.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 5. Download the&amp;nbsp;course&lt;/h3&gt;
&lt;p&gt;Now all that is left is to read titles and links and
download them. I prefer to use &lt;a href="http://aria2.sourceforge.net/"&gt;aria2c&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IFS=&amp;#39;|&amp;#39; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; while read a b; do n=&lt;span class="nv"&gt;$a.&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="c1"&gt;##*.&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;; aria2c --allow-overwrite=false --auto-file-renaming=false -o &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;; done &lt;span class="nt"&gt;&amp;lt; fmt.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;${b##*.}&lt;/code&gt; is a command to get filename extension (see &lt;a href="http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash"&gt;this&lt;/a&gt;
and &lt;a href="http://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html#Shell-Parameter-Expansion"&gt;this&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://alistairisrael.wordpress.com/2007/09/26/querying-an-xml-document-using-xmlstarlet/"&gt;Querying an &lt;span class="caps"&gt;XML&lt;/span&gt; document using&amp;nbsp;XMLStarlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xmlstar.sourceforge.net/doc/UG/xmlstarlet-ug.html"&gt;XmlStarlet Command Line &lt;span class="caps"&gt;XML&lt;/span&gt; Toolkit User&amp;#8217;s&amp;nbsp;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freesoftwaremagazine.com/articles/xml_starlet"&gt;XMLStarlet: a Unix toolkit for &lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>“Using R to visualize data”</title><link href="http://balta2ar.github.io/using-r-to-visualize-data.html" rel="alternate"></link><published>2013-05-03T15:44:00+04:00</published><updated>2013-05-03T15:44:00+04:00</updated><author><name>Yuri Bochkarev</name></author><id>tag:balta2ar.github.io,2013-05-03:/using-r-to-visualize-data.html</id><summary type="html">&lt;p&gt;R is a great tool for visualising data. Recently I&amp;#8217;ve got a chance to work on a
project which handles rather big amounts of data. I was told the data is big but
I&amp;#8217;ve never seen any visuals myself. One day I decided to collect more
information about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;R is a great tool for visualising data. Recently I&amp;#8217;ve got a chance to work on a
project which handles rather big amounts of data. I was told the data is big but
I&amp;#8217;ve never seen any visuals myself. One day I decided to collect more
information about the data and plot some&amp;nbsp;graphics.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;Initially data was collected into csv files of the following&amp;nbsp;structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client,type,subtype,size,name
bidswitch,aggregates,predict_price_2,114876,2013-02-15-00.bidswitch.prod.predict_price_2.tsv.gz
admaxasia,aggregates,budget_4,10398,2013-02-14_17:25:50.2013-02-15_00:15:00.admaxasia.prod.budget_4.tsv.gz
tokyo,logs,pixel,3802377,2013-02-15-19-30-00.CET.pixel_v36.userverlua-ireland22_338a1.log.gz
tokyo,logs,pixel,2695996,2013-02-15-19-30-00.CET.pixel_v36.userverlua-ireland25_a9a45.log.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Later the format has changed and a few fields were added: &lt;code&gt;mtime&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;,
&lt;code&gt;group&lt;/code&gt;, &lt;code&gt;perm&lt;/code&gt;. However in this acticle we will only need &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;
fields.&lt;/p&gt;
&lt;h2&gt;Know your&amp;nbsp;enemy&lt;/h2&gt;
&lt;p&gt;So basically what I wanted to know is what amounts of data are flowing through
the system? I was curious to know the number of files for each client and their
total&amp;nbsp;size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;R&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; data &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;all/raw/files-2013-02-15.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
R&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;167247&lt;/span&gt;      &lt;span class="m"&gt;5&lt;/span&gt;
R&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;client&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;subtype&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;   
R&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;list.files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;all/raw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;74&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not many files yet, but they&amp;#8217;re counting every day and we can see something
interesting&amp;nbsp;today.&lt;/p&gt;
&lt;h2&gt;First&amp;nbsp;steps&lt;/h2&gt;
&lt;p&gt;My first step was to take standart plotting functions and get somewhat
acceptable plot where I can see the players. Being a novice in R I can say it
was not that easy. After a lot of googling I got my first working prototype
and it appeared to be quite lengthy and&amp;nbsp;verbose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Plot number of files and total size of files per client from csv.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
plotNullt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    par&lt;span class="p"&gt;(&lt;/span&gt;mfrow&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    d &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; head&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; colClasses&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;character&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    d&lt;span class="o"&gt;$&lt;/span&gt;size &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;$&lt;/span&gt;size&lt;span class="p"&gt;)&lt;/span&gt;
    sizes &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;$&lt;/span&gt;size&lt;span class="p"&gt;,&lt;/span&gt; by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;client &lt;span class="o"&gt;=&lt;/span&gt; d&lt;span class="o"&gt;$&lt;/span&gt;client&lt;span class="p"&gt;),&lt;/span&gt; FUN&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    sizes&lt;span class="o"&gt;$&lt;/span&gt;x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sizes&lt;span class="o"&gt;$&lt;/span&gt;x &lt;span class="o"&gt;%/%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# b to Mb&lt;/span&gt;
    total_size &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;$&lt;/span&gt;size&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%/%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    total_files &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# plot data size info&lt;/span&gt;
    K &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sizes&lt;span class="o"&gt;$&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;
    ord &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sizes&lt;span class="o"&gt;$&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; decreasing&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    par&lt;span class="p"&gt;(&lt;/span&gt;oma&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    main &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Mb per client (%s, total size = %dMb)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; total_size&lt;span class="p"&gt;)&lt;/span&gt;
    a &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; barplot&lt;span class="p"&gt;(&lt;/span&gt;sizes&lt;span class="o"&gt;$&lt;/span&gt;x&lt;span class="p"&gt;[&lt;/span&gt;ord&lt;span class="p"&gt;],&lt;/span&gt; axes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ylab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Mb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; main&lt;span class="o"&gt;=&lt;/span&gt;main&lt;span class="p"&gt;)&lt;/span&gt;
    m &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sizes&lt;span class="o"&gt;$&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;
    axis&lt;span class="p"&gt;(&lt;/span&gt;side&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="o"&gt;=&lt;/span&gt;a&lt;span class="p"&gt;,&lt;/span&gt; labels&lt;span class="o"&gt;=&lt;/span&gt;sizes&lt;span class="o"&gt;$&lt;/span&gt;client&lt;span class="p"&gt;[&lt;/span&gt;ord&lt;span class="p"&gt;],&lt;/span&gt; las&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    axis&lt;span class="p"&gt;(&lt;/span&gt;side&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; m&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# files per client&lt;/span&gt;
    clients &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="o"&gt;$&lt;/span&gt;client&lt;span class="p"&gt;)&lt;/span&gt;
    x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;clients&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="p"&gt;[&lt;/span&gt;d&lt;span class="o"&gt;$&lt;/span&gt;client &lt;span class="o"&gt;==&lt;/span&gt; x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]))&lt;/span&gt;
    lines &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;client&lt;span class="o"&gt;=&lt;/span&gt;clients&lt;span class="p"&gt;,&lt;/span&gt; files&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# plot # of files info&lt;/span&gt;
    ord &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lines&lt;span class="o"&gt;$&lt;/span&gt;files&lt;span class="p"&gt;,&lt;/span&gt; decreasing&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    main &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;# of files per client (%s, total # of files = %d)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; total_files&lt;span class="p"&gt;)&lt;/span&gt;
    a &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; barplot&lt;span class="p"&gt;(&lt;/span&gt;lines&lt;span class="o"&gt;$&lt;/span&gt;files&lt;span class="p"&gt;[&lt;/span&gt;ord&lt;span class="p"&gt;],&lt;/span&gt; axes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ylab&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;# of files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; main&lt;span class="o"&gt;=&lt;/span&gt;main&lt;span class="p"&gt;)&lt;/span&gt;
    m &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;lines&lt;span class="o"&gt;$&lt;/span&gt;files&lt;span class="p"&gt;)&lt;/span&gt;
    axis&lt;span class="p"&gt;(&lt;/span&gt;side&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="o"&gt;=&lt;/span&gt;a&lt;span class="p"&gt;,&lt;/span&gt; labels&lt;span class="o"&gt;=&lt;/span&gt;lines&lt;span class="o"&gt;$&lt;/span&gt;client&lt;span class="p"&gt;[&lt;/span&gt;ord&lt;span class="p"&gt;],&lt;/span&gt; las&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    axis&lt;span class="p"&gt;(&lt;/span&gt;side&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; m&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this function we&amp;#8217;re plotting two plots. We use &lt;code&gt;par&lt;/code&gt; and &lt;code&gt;mfrow&lt;/code&gt; to specify
the number of rows and columns of subplots in our main&amp;nbsp;plot.&lt;/p&gt;
&lt;p&gt;Next we read the data from the file, making sure we get &lt;code&gt;size&lt;/code&gt; column as numeric
values. It took me a while to figure out how to use &lt;code&gt;aggregate&lt;/code&gt; the right way.
We use it to find the sum of file sizes for each client. This could probably be
implemented using powerful
&lt;a href="http://cran.r-project.org/web/packages/plyr/index.html"&gt;plyr&lt;/a&gt; package but I&amp;#8217;m
not familiar with it yet. It&amp;#8217;s one line of code for aggregation already which is
good enough. Next we divide aggregated sums by 1024 ^ 2 to represent values in
Mb. Total size and total number of files is also&amp;nbsp;remembered.&lt;/p&gt;
&lt;p&gt;After that we draw our first plot. The most challenging part here was to provide
correct ordering: I wanted clients to be sorted in a decreasing order of their
respective values, be it file sizes or number of files. Another tricky part was
to rotate the axis labels by 90 degrees and to add more ticks to the axis.
The former one was solved with &lt;code&gt;axis&lt;/code&gt; function and &lt;code&gt;las&lt;/code&gt; parameter. The latter
one was simpler and only required to use &lt;code&gt;at&lt;/code&gt; and &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next I&amp;#8217;m using &lt;code&gt;sapply&lt;/code&gt; to calculate the number of files per client. This is
weird and I don&amp;#8217;t know why I didn&amp;#8217;t use &lt;code&gt;aggregate&lt;/code&gt; again, it could be much&amp;nbsp;simpler.&lt;/p&gt;
&lt;p&gt;And pretty much the same story with the second plot. The code is basically the
same and except of a few different lines. The result looks as&amp;nbsp;follows:&lt;/p&gt;
&lt;!-- {% img ./std-both-count-size.png %} --&gt;

&lt;p&gt;&lt;img alt="Alt text" src="http://balta2ar.github.io/images/std-both-count-size.png"&gt;&lt;/p&gt;</content></entry></feed>